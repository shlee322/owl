/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package controlApi;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class controlApi {

  public interface Iface extends common.ApplicationService.Iface {

    public void sendMailSet(mailSet mailset) throws TException;

    public String getStatic(String sendDate) throws TException;

  }

  public interface AsyncIface extends common.ApplicationService .AsyncIface {

    public void sendMailSet(mailSet mailset, AsyncMethodCallback<AsyncClient.sendMailSet_call> resultHandler) throws TException;

    public void getStatic(String sendDate, AsyncMethodCallback<AsyncClient.getStatic_call> resultHandler) throws TException;

  }

  public static class Client extends common.ApplicationService.Client implements TServiceClient, Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public void sendMailSet(mailSet mailset) throws TException
    {
      send_sendMailSet(mailset);
    }

    public void send_sendMailSet(mailSet mailset) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMailSet", TMessageType.CALL, ++seqid_));
      sendMailSet_args args = new sendMailSet_args();
      args.setMailset(mailset);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String getStatic(String sendDate) throws TException
    {
      send_getStatic(sendDate);
      return recv_getStatic();
    }

    public void send_getStatic(String sendDate) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getStatic", TMessageType.CALL, ++seqid_));
      getStatic_args args = new getStatic_args();
      args.setSendDate(sendDate);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getStatic() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getStatic failed: out of sequence response");
      }
      getStatic_result result = new getStatic_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getStatic failed: unknown result");
    }

  }
  public static class AsyncClient extends common.ApplicationService.AsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendMailSet(mailSet mailset, AsyncMethodCallback<sendMailSet_call> resultHandler) throws TException {
      checkReady();
      sendMailSet_call method_call = new sendMailSet_call(mailset, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class sendMailSet_call extends TAsyncMethodCall {
      private mailSet mailset;
      public sendMailSet_call(mailSet mailset, AsyncMethodCallback<sendMailSet_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.mailset = mailset;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("sendMailSet", TMessageType.CALL, 0));
        sendMailSet_args args = new sendMailSet_args();
        args.setMailset(mailset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getStatic(String sendDate, AsyncMethodCallback<getStatic_call> resultHandler) throws TException {
      checkReady();
      getStatic_call method_call = new getStatic_call(sendDate, resultHandler, this, protocolFactory, transport);
      manager.call(method_call);
    }

    public static class getStatic_call extends TAsyncMethodCall {
      private String sendDate;
      public getStatic_call(String sendDate, AsyncMethodCallback<getStatic_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sendDate = sendDate;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("getStatic", TMessageType.CALL, 0));
        getStatic_args args = new getStatic_args();
        args.setSendDate(sendDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatic();
      }
    }

  }

  public static class Processor extends common.ApplicationService.Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("sendMailSet", new sendMailSet());
      processMap_.put("getStatic", new getStatic());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class sendMailSet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMailSet_args args = new sendMailSet_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMailSet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        iface_.sendMailSet(args.mailset);
        return;
      }
    }

    private class getStatic implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getStatic_args args = new getStatic_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getStatic", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getStatic_result result = new getStatic_result();
        result.success = iface_.getStatic(args.sendDate);
        oprot.writeMessageBegin(new TMessage("getStatic", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class sendMailSet_args implements TBase<sendMailSet_args, sendMailSet_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMailSet_args");

    private static final TField MAILSET_FIELD_DESC = new TField("mailset", TType.STRUCT, (short)1);

    public mailSet mailset;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      MAILSET((short)1, "mailset");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAILSET
            return MAILSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAILSET, new FieldMetaData("mailset", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, mailSet.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(sendMailSet_args.class, metaDataMap);
    }

    public sendMailSet_args() {
    }

    public sendMailSet_args(
      mailSet mailset)
    {
      this();
      this.mailset = mailset;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMailSet_args(sendMailSet_args other) {
      if (other.isSetMailset()) {
        this.mailset = new mailSet(other.mailset);
      }
    }

    public sendMailSet_args deepCopy() {
      return new sendMailSet_args(this);
    }

    @Override
    public void clear() {
      this.mailset = null;
    }

    public mailSet getMailset() {
      return this.mailset;
    }

    public sendMailSet_args setMailset(mailSet mailset) {
      this.mailset = mailset;
      return this;
    }

    public void unsetMailset() {
      this.mailset = null;
    }

    /** Returns true if field mailset is set (has been asigned a value) and false otherwise */
    public boolean isSetMailset() {
      return this.mailset != null;
    }

    public void setMailsetIsSet(boolean value) {
      if (!value) {
        this.mailset = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAILSET:
        if (value == null) {
          unsetMailset();
        } else {
          setMailset((mailSet)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAILSET:
        return getMailset();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAILSET:
        return isSetMailset();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMailSet_args)
        return this.equals((sendMailSet_args)that);
      return false;
    }

    public boolean equals(sendMailSet_args that) {
      if (that == null)
        return false;

      boolean this_present_mailset = true && this.isSetMailset();
      boolean that_present_mailset = true && that.isSetMailset();
      if (this_present_mailset || that_present_mailset) {
        if (!(this_present_mailset && that_present_mailset))
          return false;
        if (!this.mailset.equals(that.mailset))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendMailSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendMailSet_args typedOther = (sendMailSet_args)other;

      lastComparison = Boolean.valueOf(isSetMailset()).compareTo(typedOther.isSetMailset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMailset()) {
        lastComparison = TBaseHelper.compareTo(this.mailset, typedOther.mailset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MAILSET
            if (field.type == TType.STRUCT) {
              this.mailset = new mailSet();
              this.mailset.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mailset != null) {
        oprot.writeFieldBegin(MAILSET_FIELD_DESC);
        this.mailset.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMailSet_args(");
      boolean first = true;

      sb.append("mailset:");
      if (this.mailset == null) {
        sb.append("null");
      } else {
        sb.append(this.mailset);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatic_args implements TBase<getStatic_args, getStatic_args._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatic_args");

    private static final TField SEND_DATE_FIELD_DESC = new TField("sendDate", TType.STRING, (short)1);

    public String sendDate;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SEND_DATE((short)1, "sendDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEND_DATE
            return SEND_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEND_DATE, new FieldMetaData("sendDate", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatic_args.class, metaDataMap);
    }

    public getStatic_args() {
    }

    public getStatic_args(
      String sendDate)
    {
      this();
      this.sendDate = sendDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatic_args(getStatic_args other) {
      if (other.isSetSendDate()) {
        this.sendDate = other.sendDate;
      }
    }

    public getStatic_args deepCopy() {
      return new getStatic_args(this);
    }

    @Override
    public void clear() {
      this.sendDate = null;
    }

    public String getSendDate() {
      return this.sendDate;
    }

    public getStatic_args setSendDate(String sendDate) {
      this.sendDate = sendDate;
      return this;
    }

    public void unsetSendDate() {
      this.sendDate = null;
    }

    /** Returns true if field sendDate is set (has been asigned a value) and false otherwise */
    public boolean isSetSendDate() {
      return this.sendDate != null;
    }

    public void setSendDateIsSet(boolean value) {
      if (!value) {
        this.sendDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEND_DATE:
        if (value == null) {
          unsetSendDate();
        } else {
          setSendDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEND_DATE:
        return getSendDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEND_DATE:
        return isSetSendDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatic_args)
        return this.equals((getStatic_args)that);
      return false;
    }

    public boolean equals(getStatic_args that) {
      if (that == null)
        return false;

      boolean this_present_sendDate = true && this.isSetSendDate();
      boolean that_present_sendDate = true && that.isSetSendDate();
      if (this_present_sendDate || that_present_sendDate) {
        if (!(this_present_sendDate && that_present_sendDate))
          return false;
        if (!this.sendDate.equals(that.sendDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatic_args typedOther = (getStatic_args)other;

      lastComparison = Boolean.valueOf(isSetSendDate()).compareTo(typedOther.isSetSendDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSendDate()) {
        lastComparison = TBaseHelper.compareTo(this.sendDate, typedOther.sendDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEND_DATE
            if (field.type == TType.STRING) {
              this.sendDate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sendDate != null) {
        oprot.writeFieldBegin(SEND_DATE_FIELD_DESC);
        oprot.writeString(this.sendDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatic_args(");
      boolean first = true;

      sb.append("sendDate:");
      if (this.sendDate == null) {
        sb.append("null");
      } else {
        sb.append(this.sendDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getStatic_result implements TBase<getStatic_result, getStatic_result._Fields>, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("getStatic_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);

    public String success;

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, FieldMetaData> metaDataMap;
    static {
      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      FieldMetaData.addStructMetaDataMap(getStatic_result.class, metaDataMap);
    }

    public getStatic_result() {
    }

    public getStatic_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatic_result(getStatic_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStatic_result deepCopy() {
      return new getStatic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStatic_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been asigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatic_result)
        return this.equals((getStatic_result)that);
      return false;
    }

    public boolean equals(getStatic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatic_result typedOther = (getStatic_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
