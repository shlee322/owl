/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package mailClient.api.java;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class mailSet implements TBase<mailSet, mailSet._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("mailSet");

  private static final TField SENDER_ADDRESS_FIELD_DESC = new TField("senderAddress", TType.STRING, (short)1);
  private static final TField WHEN_TO_SEND_FIELD_DESC = new TField("whenToSend", TType.I64, (short)2);
  private static final TField MAIL_CONTENT_FIELD_DESC = new TField("mailContent", TType.STRING, (short)3);
  private static final TField ADDRESS_BOOK_FIELD_DESC = new TField("addressBook", TType.STRING, (short)4);
  private static final TField CREAT_ADDRESS_FIELD_DESC = new TField("creatAddress", TType.BOOL, (short)5);

  public String senderAddress;
  public long whenToSend;
  public String mailContent;
  public ByteBuffer addressBook;
  public boolean creatAddress;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    SENDER_ADDRESS((short)1, "senderAddress"),
    WHEN_TO_SEND((short)2, "whenToSend"),
    MAIL_CONTENT((short)3, "mailContent"),
    ADDRESS_BOOK((short)4, "addressBook"),
    CREAT_ADDRESS((short)5, "creatAddress");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENDER_ADDRESS
          return SENDER_ADDRESS;
        case 2: // WHEN_TO_SEND
          return WHEN_TO_SEND;
        case 3: // MAIL_CONTENT
          return MAIL_CONTENT;
        case 4: // ADDRESS_BOOK
          return ADDRESS_BOOK;
        case 5: // CREAT_ADDRESS
          return CREAT_ADDRESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WHENTOSEND_ISSET_ID = 0;
  private static final int __CREATADDRESS_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENDER_ADDRESS, new FieldMetaData("senderAddress", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.WHEN_TO_SEND, new FieldMetaData("whenToSend", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMap.put(_Fields.MAIL_CONTENT, new FieldMetaData("mailContent", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.ADDRESS_BOOK, new FieldMetaData("addressBook", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.CREAT_ADDRESS, new FieldMetaData("creatAddress", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(mailSet.class, metaDataMap);
  }

  public mailSet() {
  }

  public mailSet(
    String senderAddress,
    long whenToSend,
    String mailContent,
    boolean creatAddress)
  {
    this();
    this.senderAddress = senderAddress;
    this.whenToSend = whenToSend;
    setWhenToSendIsSet(true);
    this.mailContent = mailContent;
    this.creatAddress = creatAddress;
    setCreatAddressIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public mailSet(mailSet other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetSenderAddress()) {
      this.senderAddress = other.senderAddress;
    }
    this.whenToSend = other.whenToSend;
    if (other.isSetMailContent()) {
      this.mailContent = other.mailContent;
    }
    if (other.isSetAddressBook()) {
      this.addressBook = TBaseHelper.copyBinary(other.addressBook);
;
    }
    this.creatAddress = other.creatAddress;
  }

  public mailSet deepCopy() {
    return new mailSet(this);
  }

  @Override
  public void clear() {
    this.senderAddress = null;
    setWhenToSendIsSet(false);
    this.whenToSend = 0;
    this.mailContent = null;
    this.addressBook = null;
    setCreatAddressIsSet(false);
    this.creatAddress = false;
  }

  public String getSenderAddress() {
    return this.senderAddress;
  }

  public mailSet setSenderAddress(String senderAddress) {
    this.senderAddress = senderAddress;
    return this;
  }

  public void unsetSenderAddress() {
    this.senderAddress = null;
  }

  /** Returns true if field senderAddress is set (has been asigned a value) and false otherwise */
  public boolean isSetSenderAddress() {
    return this.senderAddress != null;
  }

  public void setSenderAddressIsSet(boolean value) {
    if (!value) {
      this.senderAddress = null;
    }
  }

  public long getWhenToSend() {
    return this.whenToSend;
  }

  public mailSet setWhenToSend(long whenToSend) {
    this.whenToSend = whenToSend;
    setWhenToSendIsSet(true);
    return this;
  }

  public void unsetWhenToSend() {
    __isset_bit_vector.clear(__WHENTOSEND_ISSET_ID);
  }

  /** Returns true if field whenToSend is set (has been asigned a value) and false otherwise */
  public boolean isSetWhenToSend() {
    return __isset_bit_vector.get(__WHENTOSEND_ISSET_ID);
  }

  public void setWhenToSendIsSet(boolean value) {
    __isset_bit_vector.set(__WHENTOSEND_ISSET_ID, value);
  }

  public String getMailContent() {
    return this.mailContent;
  }

  public mailSet setMailContent(String mailContent) {
    this.mailContent = mailContent;
    return this;
  }

  public void unsetMailContent() {
    this.mailContent = null;
  }

  /** Returns true if field mailContent is set (has been asigned a value) and false otherwise */
  public boolean isSetMailContent() {
    return this.mailContent != null;
  }

  public void setMailContentIsSet(boolean value) {
    if (!value) {
      this.mailContent = null;
    }
  }

  public byte[] getAddressBook() {
    setAddressBook(TBaseHelper.rightSize(addressBook));
    return addressBook.array();
  }

  public ByteBuffer BufferForAddressBook() {
    return addressBook;
  }

  public mailSet setAddressBook(byte[] addressBook) {
    setAddressBook(ByteBuffer.wrap(addressBook));
    return this;
  }

  public mailSet setAddressBook(ByteBuffer addressBook) {
    this.addressBook = addressBook;
    return this;
  }

  public void unsetAddressBook() {
    this.addressBook = null;
  }

  /** Returns true if field addressBook is set (has been asigned a value) and false otherwise */
  public boolean isSetAddressBook() {
    return this.addressBook != null;
  }

  public void setAddressBookIsSet(boolean value) {
    if (!value) {
      this.addressBook = null;
    }
  }

  public boolean isCreatAddress() {
    return this.creatAddress;
  }

  public mailSet setCreatAddress(boolean creatAddress) {
    this.creatAddress = creatAddress;
    setCreatAddressIsSet(true);
    return this;
  }

  public void unsetCreatAddress() {
    __isset_bit_vector.clear(__CREATADDRESS_ISSET_ID);
  }

  /** Returns true if field creatAddress is set (has been asigned a value) and false otherwise */
  public boolean isSetCreatAddress() {
    return __isset_bit_vector.get(__CREATADDRESS_ISSET_ID);
  }

  public void setCreatAddressIsSet(boolean value) {
    __isset_bit_vector.set(__CREATADDRESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENDER_ADDRESS:
      if (value == null) {
        unsetSenderAddress();
      } else {
        setSenderAddress((String)value);
      }
      break;

    case WHEN_TO_SEND:
      if (value == null) {
        unsetWhenToSend();
      } else {
        setWhenToSend((Long)value);
      }
      break;

    case MAIL_CONTENT:
      if (value == null) {
        unsetMailContent();
      } else {
        setMailContent((String)value);
      }
      break;

    case ADDRESS_BOOK:
      if (value == null) {
        unsetAddressBook();
      } else {
        setAddressBook((ByteBuffer)value);
      }
      break;

    case CREAT_ADDRESS:
      if (value == null) {
        unsetCreatAddress();
      } else {
        setCreatAddress((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENDER_ADDRESS:
      return getSenderAddress();

    case WHEN_TO_SEND:
      return new Long(getWhenToSend());

    case MAIL_CONTENT:
      return getMailContent();

    case ADDRESS_BOOK:
      return getAddressBook();

    case CREAT_ADDRESS:
      return new Boolean(isCreatAddress());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENDER_ADDRESS:
      return isSetSenderAddress();
    case WHEN_TO_SEND:
      return isSetWhenToSend();
    case MAIL_CONTENT:
      return isSetMailContent();
    case ADDRESS_BOOK:
      return isSetAddressBook();
    case CREAT_ADDRESS:
      return isSetCreatAddress();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof mailSet)
      return this.equals((mailSet)that);
    return false;
  }

  public boolean equals(mailSet that) {
    if (that == null)
      return false;

    boolean this_present_senderAddress = true && this.isSetSenderAddress();
    boolean that_present_senderAddress = true && that.isSetSenderAddress();
    if (this_present_senderAddress || that_present_senderAddress) {
      if (!(this_present_senderAddress && that_present_senderAddress))
        return false;
      if (!this.senderAddress.equals(that.senderAddress))
        return false;
    }

    boolean this_present_whenToSend = true;
    boolean that_present_whenToSend = true;
    if (this_present_whenToSend || that_present_whenToSend) {
      if (!(this_present_whenToSend && that_present_whenToSend))
        return false;
      if (this.whenToSend != that.whenToSend)
        return false;
    }

    boolean this_present_mailContent = true && this.isSetMailContent();
    boolean that_present_mailContent = true && that.isSetMailContent();
    if (this_present_mailContent || that_present_mailContent) {
      if (!(this_present_mailContent && that_present_mailContent))
        return false;
      if (!this.mailContent.equals(that.mailContent))
        return false;
    }

    boolean this_present_addressBook = true && this.isSetAddressBook();
    boolean that_present_addressBook = true && that.isSetAddressBook();
    if (this_present_addressBook || that_present_addressBook) {
      if (!(this_present_addressBook && that_present_addressBook))
        return false;
      if (!this.addressBook.equals(that.addressBook))
        return false;
    }

    boolean this_present_creatAddress = true;
    boolean that_present_creatAddress = true;
    if (this_present_creatAddress || that_present_creatAddress) {
      if (!(this_present_creatAddress && that_present_creatAddress))
        return false;
      if (this.creatAddress != that.creatAddress)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(mailSet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    mailSet typedOther = (mailSet)other;

    lastComparison = Boolean.valueOf(isSetSenderAddress()).compareTo(typedOther.isSetSenderAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderAddress()) {
      lastComparison = TBaseHelper.compareTo(this.senderAddress, typedOther.senderAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhenToSend()).compareTo(typedOther.isSetWhenToSend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhenToSend()) {
      lastComparison = TBaseHelper.compareTo(this.whenToSend, typedOther.whenToSend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMailContent()).compareTo(typedOther.isSetMailContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMailContent()) {
      lastComparison = TBaseHelper.compareTo(this.mailContent, typedOther.mailContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddressBook()).compareTo(typedOther.isSetAddressBook());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressBook()) {
      lastComparison = TBaseHelper.compareTo(this.addressBook, typedOther.addressBook);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatAddress()).compareTo(typedOther.isSetCreatAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatAddress()) {
      lastComparison = TBaseHelper.compareTo(this.creatAddress, typedOther.creatAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SENDER_ADDRESS
          if (field.type == TType.STRING) {
            this.senderAddress = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // WHEN_TO_SEND
          if (field.type == TType.I64) {
            this.whenToSend = iprot.readI64();
            setWhenToSendIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MAIL_CONTENT
          if (field.type == TType.STRING) {
            this.mailContent = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ADDRESS_BOOK
          if (field.type == TType.STRING) {
            this.addressBook = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CREAT_ADDRESS
          if (field.type == TType.BOOL) {
            this.creatAddress = iprot.readBool();
            setCreatAddressIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.senderAddress != null) {
      oprot.writeFieldBegin(SENDER_ADDRESS_FIELD_DESC);
      oprot.writeString(this.senderAddress);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WHEN_TO_SEND_FIELD_DESC);
    oprot.writeI64(this.whenToSend);
    oprot.writeFieldEnd();
    if (this.mailContent != null) {
      oprot.writeFieldBegin(MAIL_CONTENT_FIELD_DESC);
      oprot.writeString(this.mailContent);
      oprot.writeFieldEnd();
    }
    if (this.addressBook != null) {
      if (isSetAddressBook()) {
        oprot.writeFieldBegin(ADDRESS_BOOK_FIELD_DESC);
        oprot.writeBinary(this.addressBook);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(CREAT_ADDRESS_FIELD_DESC);
    oprot.writeBool(this.creatAddress);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("mailSet(");
    boolean first = true;

    sb.append("senderAddress:");
    if (this.senderAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.senderAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("whenToSend:");
    sb.append(this.whenToSend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mailContent:");
    if (this.mailContent == null) {
      sb.append("null");
    } else {
      sb.append(this.mailContent);
    }
    first = false;
    if (isSetAddressBook()) {
      if (!first) sb.append(", ");
      sb.append("addressBook:");
      if (this.addressBook == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.addressBook, sb);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("creatAddress:");
    sb.append(this.creatAddress);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

